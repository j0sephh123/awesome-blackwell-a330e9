{"version":3,"sources":["webpack://netlify-cms/..-core/src/components/Workflow/WorkflowCard.js","webpack://netlify-cms/..-core/src/components/Workflow/WorkflowList.js","webpack://netlify-cms/..-core/src/components/Workflow/Workflow.js"],"names":["styles","text","Object","index_esm","button","netlify_cms_ui_default","WorkflowLink","Link","label","target","CardCollection","textLead","CardTitle","CardDate","CardBody","CardButtonContainer","foreground","main","DeleteButton","redLight","red","PublishButton","teal","textLight","grayLight","gray","WorkflowCardContainer","card","WorkflowCard","collectionName","title","authorLastChange","body","isModification","editLink","timestamp","onDelete","canPublish","onPublish","t","react_default","a","createElement","to","date","author","onClick","disabled","propTypes","prop_types_default","string","isRequired","bool","func","Workflow_WorkflowCard","lib","WorkflowListContainer","WorkflowList_styles","column","textFieldBorder","columnHovered","active","ColumnHeader","borderRadius","props","name","statusDraftBackground","statusDraftText","statusReviewBackground","statusReviewText","statusReadyBackground","statusReadyText","ColumnCount","DNDNamespace","getColumnHeaderText","columnName","WorkflowList_WorkflowList","Component","[object Object]","args","super","_defineProperty","this","newStatus","dragProps","slug","collection","oldStatus","ownStatus","handleChangeStatus","window","confirm","handleDelete","publishModes","last","handlePublish","alert","entries","map","entry","moment_default","getIn","format","get","UI","namespace","key","connect","requestDelete","bind","requestPublish","entrySeq","currColumn","currEntries","onDrop","isHovered","className","smart_count","size","renderColumns","render","columns","ImmutablePropTypes_default","orderedMap","Workflow_WorkflowList","WorkflowContainer","pageMargin","WorkflowTop","cardTop","WorkflowTopRow","dropDeep","WorkflowTopHeading","cardTopHeading","WorkflowTopDescription","cardTopDescription","Workflow_Workflow","react","componentDidMount","_this$props","loadUnpublishedEntries","isEditorialWorkflow","collections","_this$props2","isFetching","unpublishedEntries","updateUnpublishedEntryStatus","publishUnpublishedEntry","deleteUnpublishedEntry","reviewCount","readyCount","dropdownWidth","dropdownPosition","dropdownTopOverlap","renderButton","filter","toList","actions_collections","__webpack_exports__","es","state","config","returnObj","editorialWorkflow","reduce","acc","currStatus","reducers","set","immutable"],"mappings":"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","file":"dist/2.netlify-cms.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled, { css } from 'react-emotion';\r\nimport { translate } from 'react-polyglot';\r\nimport { Link } from 'react-router-dom';\r\nimport { components, colors, colorsRaw, transitions, buttons } from 'netlify-cms-ui-default';\r\n\r\nconst styles = {\r\n  text: css`\r\n    font-size: 13px;\r\n    font-weight: normal;\r\n    margin-top: 4px;\r\n  `,\r\n  button: css`\r\n    ${buttons.button};\r\n    width: auto;\r\n    flex: 1 0 0;\r\n    font-size: 13px;\r\n    padding: 6px 0;\r\n  `,\r\n};\r\n\r\nconst WorkflowLink = styled(Link)`\r\n  display: block;\r\n  padding: 0 18px 18px;\r\n  height: 200px;\r\n  overflow: hidden;\r\n`;\r\n\r\nconst CardCollection = styled.div`\r\n  font-size: 14px;\r\n  color: ${colors.textLead};\r\n  text-transform: uppercase;\r\n  margin-top: 12px;\r\n  text-overflow: ellipsis;\r\n  overflow: hidden;\r\n  white-space: nowrap;\r\n`;\r\n\r\nconst CardTitle = styled.h2`\r\n  margin: 28px 0 0;\r\n  color: ${colors.textLead};\r\n`;\r\n\r\nconst CardDate = styled.div`\r\n  ${styles.text};\r\n`;\r\n\r\nconst CardBody = styled.p`\r\n  ${styles.text};\r\n  color: ${colors.text};\r\n  margin: 24px 0 0;\r\n  overflow-wrap: break-word;\r\n  word-break: break-word;\r\n  hyphens: auto;\r\n`;\r\n\r\nconst CardButtonContainer = styled.div`\r\n  background-color: ${colors.foreground};\r\n  position: absolute;\r\n  bottom: 0;\r\n  width: 100%;\r\n  padding: 12px 18px;\r\n  display: flex;\r\n  opacity: 0;\r\n  transition: opacity ${transitions.main};\r\n  cursor: pointer;\r\n`;\r\n\r\nconst DeleteButton = styled.button`\r\n  ${styles.button};\r\n  background-color: ${colorsRaw.redLight};\r\n  color: ${colorsRaw.red};\r\n  margin-right: 6px;\r\n`;\r\n\r\nconst PublishButton = styled.button`\r\n  ${styles.button};\r\n  background-color: ${colorsRaw.teal};\r\n  color: ${colors.textLight};\r\n  margin-left: 6px;\r\n\r\n  &[disabled] {\r\n    background-color: ${colorsRaw.grayLight};\r\n    color: ${colorsRaw.gray};\r\n  }\r\n`;\r\n\r\nconst WorkflowCardContainer = styled.div`\r\n  ${components.card};\r\n  margin-bottom: 24px;\r\n  position: relative;\r\n  overflow: hidden;\r\n\r\n  &:hover ${CardButtonContainer} {\r\n    opacity: 1;\r\n  }\r\n`;\r\n\r\nconst WorkflowCard = ({\r\n  collectionName,\r\n  title,\r\n  authorLastChange,\r\n  body,\r\n  isModification,\r\n  editLink,\r\n  timestamp,\r\n  onDelete,\r\n  canPublish,\r\n  onPublish,\r\n  t,\r\n}) => (\r\n  <WorkflowCardContainer>\r\n    <WorkflowLink to={editLink}>\r\n      <CardCollection>{collectionName}</CardCollection>\r\n      <CardTitle>{title}</CardTitle>\r\n      <CardDate>\r\n        {t('workflow.workflowCard.lastChange', {\r\n          date: timestamp || '',\r\n          author: authorLastChange || '',\r\n        })}\r\n      </CardDate>\r\n      <CardBody>{body}</CardBody>\r\n    </WorkflowLink>\r\n    <CardButtonContainer>\r\n      <DeleteButton onClick={onDelete}>\r\n        {isModification\r\n          ? t('workflow.workflowCard.deleteChanges')\r\n          : t('workflow.workflowCard.deleteNewEntry')}\r\n      </DeleteButton>\r\n      <PublishButton disabled={!canPublish} onClick={onPublish}>\r\n        {isModification\r\n          ? t('workflow.workflowCard.publishChanges')\r\n          : t('workflow.workflowCard.publishNewEntry')}\r\n      </PublishButton>\r\n    </CardButtonContainer>\r\n  </WorkflowCardContainer>\r\n);\r\n\r\nWorkflowCard.propTypes = {\r\n  collectionName: PropTypes.string.isRequired,\r\n  title: PropTypes.string.isRequired,\r\n  authorLastChange: PropTypes.string.isRequired,\r\n  body: PropTypes.string.isRequired,\r\n  isModification: PropTypes.bool,\r\n  editLink: PropTypes.string.isRequired,\r\n  timestamp: PropTypes.string.isRequired,\r\n  onDelete: PropTypes.func.isRequired,\r\n  canPublish: PropTypes.bool.isRequired,\r\n  onPublish: PropTypes.func.isRequired,\r\n  t: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default translate()(WorkflowCard);\r\n","import PropTypes from 'prop-types';\r\nimport React from 'react';\r\nimport ImmutablePropTypes from 'react-immutable-proptypes';\r\nimport styled, { css, cx } from 'react-emotion';\r\nimport moment from 'moment';\r\nimport { translate } from 'react-polyglot';\r\nimport { colors, lengths } from 'netlify-cms-ui-default';\r\nimport { status } from 'Constants/publishModes';\r\nimport { DragSource, DropTarget, HTML5DragDrop } from 'UI';\r\nimport WorkflowCard from './WorkflowCard';\r\n\r\nconst WorkflowListContainer = styled.div`\r\n  min-height: 60%;\r\n  display: grid;\r\n  grid-template-columns: 33.3% 33.3% 33.3%;\r\n`;\r\n\r\nconst styles = {\r\n  column: css`\r\n    margin: 0 20px;\r\n    transition: background-color 0.5s ease;\r\n    border: 2px dashed transparent;\r\n    border-radius: 4px;\r\n    position: relative;\r\n\r\n    &:first-child {\r\n      margin-left: 0;\r\n    }\r\n\r\n    &:last-child {\r\n      margin-right: 0;\r\n    }\r\n\r\n    &:not(:first-child):not(:last-child) {\r\n      &:before,\r\n      &:after {\r\n        content: '';\r\n        display: block;\r\n        position: absolute;\r\n        width: 2px;\r\n        height: 80%;\r\n        top: 76px;\r\n        background-color: ${colors.textFieldBorder};\r\n      }\r\n\r\n      &:before {\r\n        left: -23px;\r\n      }\r\n\r\n      &:after {\r\n        right: -23px;\r\n      }\r\n    }\r\n  `,\r\n  columnHovered: css`\r\n    border-color: ${colors.active};\r\n  `,\r\n};\r\n\r\nconst ColumnHeader = styled.h2`\r\n  font-size: 20px;\r\n  font-weight: normal;\r\n  padding: 4px 14px;\r\n  border-radius: ${lengths.borderRadius};\r\n  margin-bottom: 28px;\r\n\r\n  ${props =>\r\n    props.name === 'draft' &&\r\n    css`\r\n      background-color: ${colors.statusDraftBackground};\r\n      color: ${colors.statusDraftText};\r\n    `}\r\n\r\n  ${props =>\r\n    props.name === 'pending_review' &&\r\n    css`\r\n      background-color: ${colors.statusReviewBackground};\r\n      color: ${colors.statusReviewText};\r\n    `}\r\n\r\n  ${props =>\r\n    props.name === 'pending_publish' &&\r\n    css`\r\n      background-color: ${colors.statusReadyBackground};\r\n      color: ${colors.statusReadyText};\r\n    `}\r\n`;\r\n\r\nconst ColumnCount = styled.p`\r\n  font-size: 13px;\r\n  font-weight: 500;\r\n  color: ${colors.text};\r\n  text-transform: uppercase;\r\n  margin-bottom: 6px;\r\n`;\r\n\r\n// This is a namespace so that we can only drop these elements on a DropTarget with the same\r\nconst DNDNamespace = 'cms-workflow';\r\n\r\nconst getColumnHeaderText = (columnName, t) => {\r\n  switch (columnName) {\r\n    case 'draft':\r\n      return t('workflow.workflowList.draftHeader');\r\n    case 'pending_review':\r\n      return t('workflow.workflowList.inReviewHeader');\r\n    case 'pending_publish':\r\n      return t('workflow.workflowList.readyHeader');\r\n  }\r\n};\r\n\r\nclass WorkflowList extends React.Component {\r\n  static propTypes = {\r\n    entries: ImmutablePropTypes.orderedMap,\r\n    handleChangeStatus: PropTypes.func.isRequired,\r\n    handlePublish: PropTypes.func.isRequired,\r\n    handleDelete: PropTypes.func.isRequired,\r\n    t: PropTypes.func.isRequired,\r\n  };\r\n\r\n  handleChangeStatus = (newStatus, dragProps) => {\r\n    const slug = dragProps.slug;\r\n    const collection = dragProps.collection;\r\n    const oldStatus = dragProps.ownStatus;\r\n    this.props.handleChangeStatus(collection, slug, oldStatus, newStatus);\r\n  };\r\n\r\n  requestDelete = (collection, slug, ownStatus) => {\r\n    if (window.confirm(this.props.t('workflow.workflowList.onDeleteEntry'))) {\r\n      this.props.handleDelete(collection, slug, ownStatus);\r\n    }\r\n  };\r\n\r\n  requestPublish = (collection, slug, ownStatus) => {\r\n    if (ownStatus !== status.last()) {\r\n      window.alert(this.props.t('workflow.workflowList.onPublishingNotReadyEntry'));\r\n      return;\r\n    } else if (!window.confirm(this.props.t('workflow.workflowList.onPublishEntry'))) {\r\n      return;\r\n    }\r\n    this.props.handlePublish(collection, slug);\r\n  };\r\n\r\n  renderColumns = (entries, column) => {\r\n    if (!entries) return null;\r\n\r\n    if (!column) {\r\n      return entries.entrySeq().map(([currColumn, currEntries]) => (\r\n        <DropTarget\r\n          namespace={DNDNamespace}\r\n          key={currColumn}\r\n          onDrop={this.handleChangeStatus.bind(this, currColumn)}\r\n        >\r\n          {(connect, { isHovered }) =>\r\n            connect(\r\n              <div className={cx(styles.column, { [styles.columnHovered]: isHovered })}>\r\n                <ColumnHeader name={currColumn}>\r\n                  {getColumnHeaderText(currColumn, this.props.t)}\r\n                </ColumnHeader>\r\n                <ColumnCount>\r\n                  {this.props.t('workflow.workflowList.currentEntries', {\r\n                    smart_count: currEntries.size,\r\n                  })}\r\n                </ColumnCount>\r\n                {this.renderColumns(currEntries, currColumn)}\r\n              </div>,\r\n            )\r\n          }\r\n        </DropTarget>\r\n      ));\r\n    }\r\n    return (\r\n      <div>\r\n        {entries.map(entry => {\r\n          const timestamp = moment(entry.getIn(['metaData', 'timeStamp'])).format('MMMM D');\r\n          const editLink = `collections/${entry.getIn([\r\n            'metaData',\r\n            'collection',\r\n          ])}/entries/${entry.get('slug')}`;\r\n          const slug = entry.get('slug');\r\n          const ownStatus = entry.getIn(['metaData', 'status']);\r\n          const collection = entry.getIn(['metaData', 'collection']);\r\n          const isModification = entry.get('isModification');\r\n          const canPublish = ownStatus === status.last() && !entry.get('isPersisting', false);\r\n          return (\r\n            <DragSource\r\n              namespace={DNDNamespace}\r\n              key={`${collection}-${slug}`}\r\n              slug={slug}\r\n              collection={collection}\r\n              ownStatus={ownStatus}\r\n            >\r\n              {connect =>\r\n                connect(\r\n                  <div>\r\n                    <WorkflowCard\r\n                      collectionName={collection}\r\n                      title={entry.getIn(['data', 'title'])}\r\n                      authorLastChange={entry.getIn(['metaData', 'user'])}\r\n                      body={entry.getIn(['data', 'body'])}\r\n                      isModification={isModification}\r\n                      editLink={editLink}\r\n                      timestamp={timestamp}\r\n                      onDelete={this.requestDelete.bind(this, collection, slug, ownStatus)}\r\n                      canPublish={canPublish}\r\n                      onPublish={this.requestPublish.bind(this, collection, slug, ownStatus)}\r\n                    />\r\n                  </div>,\r\n                )\r\n              }\r\n            </DragSource>\r\n          );\r\n        })}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  render() {\r\n    const columns = this.renderColumns(this.props.entries);\r\n    return <WorkflowListContainer>{columns}</WorkflowListContainer>;\r\n  }\r\n}\r\n\r\nexport default HTML5DragDrop(translate()(WorkflowList));\r\n","import PropTypes from 'prop-types';\r\nimport React, { Component } from 'react';\r\nimport ImmutablePropTypes from 'react-immutable-proptypes';\r\nimport styled from 'react-emotion';\r\nimport { OrderedMap } from 'immutable';\r\nimport { translate } from 'react-polyglot';\r\nimport { connect } from 'react-redux';\r\nimport {\r\n  Dropdown,\r\n  DropdownItem,\r\n  StyledDropdownButton,\r\n  Loader,\r\n  lengths,\r\n  components,\r\n  shadows,\r\n} from 'netlify-cms-ui-default';\r\nimport { createNewEntry } from 'Actions/collections';\r\nimport {\r\n  loadUnpublishedEntries,\r\n  updateUnpublishedEntryStatus,\r\n  publishUnpublishedEntry,\r\n  deleteUnpublishedEntry,\r\n} from 'Actions/editorialWorkflow';\r\nimport { selectUnpublishedEntriesByStatus } from 'Reducers';\r\nimport { EDITORIAL_WORKFLOW, status } from 'Constants/publishModes';\r\nimport WorkflowList from './WorkflowList';\r\n\r\nconst WorkflowContainer = styled.div`\r\n  padding: ${lengths.pageMargin} 0;\r\n  height: 100vh;\r\n`;\r\n\r\nconst WorkflowTop = styled.div`\r\n  ${components.cardTop};\r\n`;\r\n\r\nconst WorkflowTopRow = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n\r\n  span[role='button'] {\r\n    ${shadows.dropDeep};\r\n  }\r\n`;\r\n\r\nconst WorkflowTopHeading = styled.h1`\r\n  ${components.cardTopHeading};\r\n`;\r\n\r\nconst WorkflowTopDescription = styled.p`\r\n  ${components.cardTopDescription};\r\n`;\r\n\r\nclass Workflow extends Component {\r\n  static propTypes = {\r\n    collections: ImmutablePropTypes.orderedMap,\r\n    isEditorialWorkflow: PropTypes.bool.isRequired,\r\n    isFetching: PropTypes.bool,\r\n    unpublishedEntries: ImmutablePropTypes.map,\r\n    loadUnpublishedEntries: PropTypes.func.isRequired,\r\n    updateUnpublishedEntryStatus: PropTypes.func.isRequired,\r\n    publishUnpublishedEntry: PropTypes.func.isRequired,\r\n    deleteUnpublishedEntry: PropTypes.func.isRequired,\r\n    t: PropTypes.func.isRequired,\r\n  };\r\n\r\n  componentDidMount() {\r\n    const { loadUnpublishedEntries, isEditorialWorkflow, collections } = this.props;\r\n    if (isEditorialWorkflow) {\r\n      loadUnpublishedEntries(collections);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      isEditorialWorkflow,\r\n      isFetching,\r\n      unpublishedEntries,\r\n      updateUnpublishedEntryStatus,\r\n      publishUnpublishedEntry,\r\n      deleteUnpublishedEntry,\r\n      collections,\r\n      t,\r\n    } = this.props;\r\n\r\n    if (!isEditorialWorkflow) return null;\r\n    if (isFetching) return <Loader active>{t('workflow.workflow.loading')}</Loader>;\r\n    const reviewCount = unpublishedEntries.get('pending_review').size;\r\n    const readyCount = unpublishedEntries.get('pending_publish').size;\r\n\r\n    return (\r\n      <WorkflowContainer>\r\n        <WorkflowTop>\r\n          <WorkflowTopRow>\r\n            <WorkflowTopHeading>{t('workflow.workflow.workflowHeading')}</WorkflowTopHeading>\r\n            <Dropdown\r\n              dropdownWidth=\"160px\"\r\n              dropdownPosition=\"left\"\r\n              dropdownTopOverlap=\"40px\"\r\n              renderButton={() => (\r\n                <StyledDropdownButton>{t('workflow.workflow.newPost')}</StyledDropdownButton>\r\n              )}\r\n            >\r\n              {collections\r\n                .filter(collection => collection.get('create'))\r\n                .toList()\r\n                .map(collection => (\r\n                  <DropdownItem\r\n                    key={collection.get('name')}\r\n                    label={collection.get('label')}\r\n                    onClick={() => createNewEntry(collection.get('name'))}\r\n                  />\r\n                ))}\r\n            </Dropdown>\r\n          </WorkflowTopRow>\r\n          <WorkflowTopDescription>\r\n            {t('workflow.workflow.description', {\r\n              smart_count: reviewCount,\r\n              readyCount: readyCount,\r\n            })}\r\n          </WorkflowTopDescription>\r\n        </WorkflowTop>\r\n        <WorkflowList\r\n          entries={unpublishedEntries}\r\n          handleChangeStatus={updateUnpublishedEntryStatus}\r\n          handlePublish={publishUnpublishedEntry}\r\n          handleDelete={deleteUnpublishedEntry}\r\n        />\r\n      </WorkflowContainer>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  const { collections } = state;\r\n  const isEditorialWorkflow = state.config.get('publish_mode') === EDITORIAL_WORKFLOW;\r\n  const returnObj = { collections, isEditorialWorkflow };\r\n\r\n  if (isEditorialWorkflow) {\r\n    returnObj.isFetching = state.editorialWorkflow.getIn(['pages', 'isFetching'], false);\r\n\r\n    /*\r\n     * Generates an ordered Map of the available status as keys.\r\n     * Each key containing a Sequence of available unpubhlished entries\r\n     * Eg.: OrderedMap{'draft':Seq(), 'pending_review':Seq(), 'pending_publish':Seq()}\r\n     */\r\n    returnObj.unpublishedEntries = status.reduce((acc, currStatus) => {\r\n      const entries = selectUnpublishedEntriesByStatus(state, currStatus);\r\n      return acc.set(currStatus, entries);\r\n    }, OrderedMap());\r\n  }\r\n  return returnObj;\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  {\r\n    loadUnpublishedEntries,\r\n    updateUnpublishedEntryStatus,\r\n    publishUnpublishedEntry,\r\n    deleteUnpublishedEntry,\r\n  },\r\n)(translate()(Workflow));\r\n"],"sourceRoot":""}